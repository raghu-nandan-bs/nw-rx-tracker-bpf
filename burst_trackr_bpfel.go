// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || arm || arm64 || loong64 || mips64le || mipsle || ppc64le || riscv64

package bpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type burst_trackrFlowData struct {
	RxPackets uint64
	RxBytes   uint64
}

// loadBurst_trackr returns the embedded CollectionSpec for burst_trackr.
func loadBurst_trackr() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Burst_trackrBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load burst_trackr: %w", err)
	}

	return spec, err
}

// loadBurst_trackrObjects loads burst_trackr and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*burst_trackrObjects
//	*burst_trackrPrograms
//	*burst_trackrMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBurst_trackrObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBurst_trackr()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// burst_trackrSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type burst_trackrSpecs struct {
	burst_trackrProgramSpecs
	burst_trackrMapSpecs
}

// burst_trackrSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type burst_trackrProgramSpecs struct {
	MsrPkts *ebpf.ProgramSpec `ebpf:"msr_pkts"`
}

// burst_trackrMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type burst_trackrMapSpecs struct {
	FlowTrackr     *ebpf.MapSpec `ebpf:"flow_trackr"`
	FlowTrackrIpv6 *ebpf.MapSpec `ebpf:"flow_trackr_ipv6"`
}

// burst_trackrObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBurst_trackrObjects or ebpf.CollectionSpec.LoadAndAssign.
type burst_trackrObjects struct {
	burst_trackrPrograms
	burst_trackrMaps
}

func (o *burst_trackrObjects) Close() error {
	return _Burst_trackrClose(
		&o.burst_trackrPrograms,
		&o.burst_trackrMaps,
	)
}

// burst_trackrMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBurst_trackrObjects or ebpf.CollectionSpec.LoadAndAssign.
type burst_trackrMaps struct {
	FlowTrackr     *ebpf.Map `ebpf:"flow_trackr"`
	FlowTrackrIpv6 *ebpf.Map `ebpf:"flow_trackr_ipv6"`
}

func (m *burst_trackrMaps) Close() error {
	return _Burst_trackrClose(
		m.FlowTrackr,
		m.FlowTrackrIpv6,
	)
}

// burst_trackrPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBurst_trackrObjects or ebpf.CollectionSpec.LoadAndAssign.
type burst_trackrPrograms struct {
	MsrPkts *ebpf.Program `ebpf:"msr_pkts"`
}

func (p *burst_trackrPrograms) Close() error {
	return _Burst_trackrClose(
		p.MsrPkts,
	)
}

func _Burst_trackrClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed burst_trackr_bpfel.o
var _Burst_trackrBytes []byte
